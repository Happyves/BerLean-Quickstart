
/-
Copyright (c) 2024 Yves J√§ckle. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Yves J√§ckle.
-/

import Mathlib.CategoryTheory.Category.Basic
import Mathlib.CategoryTheory.Functor.Basic
import Mathlib.CategoryTheory.NatTrans
import Mathlib.CategoryTheory.Adjunction.Basic
import Mathlib.CategoryTheory.Limits.IsLimit
import Mathlib.CategoryTheory.Limits.Presheaf
import Mathlib.Topology.Sheaves.Presheaf
import Mathlib.Tactic

open CategoryTheory

/-
Introduces notations in the `CategoryTheory` scope
* `X ‚ü∂ Y` for the morphism spaces (type as `\hom`),
* `ùüô X` for the identity morphism on `X` (type as `\b1`),
* `f ‚â´ g` for composition in the 'arrows' convention (type as `\gg`).
-/

-- Mathlib.CategoryTheory.Category.Basic has discussion on universes for category types


/- A quiver `G` on a type `V` of vertices assigns to every pair `a b : V` of vertices
a type `a ‚ü∂ b` of arrows from `a` to `b`.

For graphs with no repeated edges, one can use `Quiver.{0} V`, which ensures
`a ‚ü∂ b : Prop`. For multigraphs, one can use `Quiver.{v+1} V`, which ensures
`a ‚ü∂ b : Type v`.

Because `Category` will later extend this class, we call the field `Hom`.
Except when constructing instances, you should rarely see this, and use the `‚ü∂` notation instead.
-/
#check Quiver
-- class Quiver (V : Type u) where
--   /-- The type of edges/arrows/morphisms between a given source and target. -/
--   Hom : V ‚Üí V ‚Üí Sort v

/- A preliminary structure on the way to defining a category,
containing the data, but none of the axioms. -/
#check CategoryStruct
-- class CategoryStruct (obj : Type u) extends Quiver.{v + 1} obj : Type max u (v + 1) where
--   /-- The identity morphism on an object. -/
--   id : ‚àÄ X : obj, Hom X X
--   /-- Composition of morphisms in a category, written `f ‚â´ g`. -/
--   comp : ‚àÄ {X Y Z : obj}, (X ‚ü∂ Y) ‚Üí (Y ‚ü∂ Z) ‚Üí (X ‚ü∂ Z)

/- The typeclass `Category C` describes morphisms associated to objects of type `C`.
The universe levels of the objects and morphisms are unconstrained, and will often need to be
specified explicitly, as `Category.{v} C`. (See also `LargeCategory` and `SmallCategory`.)

See <https://stacks.math.columbia.edu/tag/0014>.
-/
#check Category
-- class Category (obj : Type u) extends CategoryStruct.{v} obj : Type max u (v + 1) where
--   /-- Identity morphisms are left identities for composition. -/
--   id_comp : ‚àÄ {X Y : obj} (f : X ‚ü∂ Y), ùüô X ‚â´ f = f := by aesop_cat
--   /-- Identity morphisms are right identities for composition. -/
--   comp_id : ‚àÄ {X Y : obj} (f : X ‚ü∂ Y), f ‚â´ ùüô Y = f := by aesop_cat
--   /-- Composition in a category is associative. -/
--   assoc : ‚àÄ {W X Y Z : obj} (f : W ‚ü∂ X) (g : X ‚ü∂ Y) (h : Y ‚ü∂ Z), (f ‚â´ g) ‚â´ h = f ‚â´ g ‚â´ h :=
--     by aesop_cat

-- example of the category of finite sets

--instance : Category (Finset ‚Ñï) := by infer_instance -- works

instance optional_name : Category (Finset ‚Ñï) :=
{Hom := (fun S T => (S ‚Üí T))
 id := (fun S => (fun x => x))
 comp := (fun f g => (fun x => g (f x)))}

set_option pp.explicit true in
#print optional_name

#print optional_name.proof_2

#check Category.assoc

#check ùüô ({1,2,3} : Finset ‚Ñï)

#check ({1,2,3} : Finset ‚Ñï)


def frist_morph : ({1,2,3} : Finset ‚Ñï) ‚ü∂ ({3,4,5} : Finset ‚Ñï):=
  fun x => ‚ü®(x.val + 2), by fin_cases x <;> norm_num ‚ü©

def second_morph : ({3,4,5} : Finset ‚Ñï) ‚ü∂ ({2,3,4} : Finset ‚Ñï):=
  fun x => ‚ü®(x.val - 1), by fin_cases x <;> norm_num ‚ü©

#check frist_morph ‚â´ second_morph

#eval (frist_morph ‚â´ second_morph) ‚ü®1, by norm_num‚ü©
